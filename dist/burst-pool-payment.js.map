{
  "version": 3,
  "sources": [
    "burst-pool-payment.js"
  ],
  "names": [
    "poolConfig",
    "require",
    "poolShare",
    "poolProtocol",
    "poolSession",
    "async",
    "fs",
    "jsonFormat",
    "blockPaymentList",
    "pendingPaymentList",
    "sentPaymentList",
    "satoshiToDecimal",
    "sat",
    "isNaN",
    "parseFloat",
    "decimalToSatoshi",
    "amount",
    "parseInt",
    "devNumericID",
    "BlockPayment",
    "height",
    "shareList",
    "totalShare",
    "allocatedFund",
    "i",
    "share",
    "assignCumulativeFund",
    "fundedList",
    "totalScale",
    "forEach",
    "payBlock",
    "reduction",
    "cumulativeFundReduction",
    "fundedItem",
    "blockPayment",
    "scale",
    "Math",
    "pow",
    "push",
    "clientLog",
    "toFixed",
    "e",
    "console",
    "log",
    "trace",
    "distributeShareToPayment",
    "accountList",
    "funddistribution",
    "devFee",
    "Poolfee2",
    "devFeePercent",
    "Poolfee",
    "poolFee",
    "floor",
    "hasOwnProperty",
    "poolFeePaymentAddr",
    "shareItem",
    "accountId",
    "blockpayment",
    "deleteAccountShare",
    "flushPaymentList",
    "done",
    "paymentItems",
    "payAccountId",
    "txFee",
    "paymentData",
    "pendingTxData",
    "JSON",
    "stringify",
    "writeFile",
    "err",
    "clearPayout",
    "clearingMinPayout",
    "failedTxList",
    "each",
    "pay",
    "callback",
    "sendPayment",
    "tx",
    "saveSessionAsync",
    "getWebsocket",
    "emit",
    "toAccountId",
    "floatAmount",
    "enablePayment",
    "httpPostForm",
    "recipient",
    "deadline",
    "defaultPaymentDeadline",
    "feeNQT",
    "amountNQT",
    "secretPhrase",
    "poolPvtKey",
    "error",
    "res",
    "body",
    "result",
    "status",
    "txid",
    "sendTime",
    "statusCode",
    "response",
    "parse",
    "transaction",
    "Date",
    "getTime",
    "length",
    "maxRecentPaymentHistory",
    "toRemove",
    "splice",
    "getState",
    "current",
    "totalPayments",
    "getPoolBalance",
    "account",
    "poolPublic",
    "numberOfConfirmations",
    "blockMature",
    "balanceResult",
    "guaranteedBalanceNQT",
    "balance",
    "saveSession",
    "data",
    "jsonData",
    "writeFileSync",
    "getPendingPaymentAmount",
    "total",
    "getBalance",
    "pendingPaymentAmount",
    "netBalance",
    "pendingBalance",
    "getRewardRecipient",
    "burstID",
    "burstname",
    "rewardRecipient",
    "Addr",
    "getDateTime",
    "date",
    "hour",
    "getHours",
    "min",
    "getMinutes",
    "sec",
    "getSeconds",
    "year",
    "getFullYear",
    "month",
    "getMonth",
    "day",
    "getDate",
    "updateByNewBlock",
    "blockList",
    "prevHeight",
    "blockShare",
    "getBlockShare",
    "getBlockInfoFromHeight",
    "blockInfo",
    "lastBlockWinner",
    "generatorRS",
    "blockReward",
    "totalBlockReward",
    "txFeeReward",
    "totalFeeNQT",
    "clientLogFormatted",
    "rewardRecip",
    "isPoolWinner",
    "minPayout",
    "minimumPayout",
    "poolFund",
    "pendingPayment",
    "poolFundWithPayments",
    "currentFund",
    "setTimeout",
    "getCumulativeShares",
    "module",
    "exports",
    "loadSession",
    "existsSync",
    "readFile",
    "loadedData",
    "getPaidList"
  ],
  "mappings": "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",
  "file": "burst-pool-payment.js",
  "sourcesContent": [
    "var poolConfig = require('./burst-pool-config');\r\nvar poolShare = require('./burst-pool-share');\r\nvar poolProtocol = require('./burst-pool-protocol');\r\nvar poolSession = require('./burst-pool-session');\r\nvar async = require('async');\r\nvar fs = require('fs');\r\nvar jsonFormat = require('prettyjson');\r\n\r\nvar blockPaymentList = [];\r\nvar pendingPaymentList = {};\r\nvar sentPaymentList = [];\r\n\r\nfunction satoshiToDecimal(sat) {\r\n    if (typeof sat === 'undefined' || isNaN(sat)) {\r\n        return 0.0;\r\n    }\r\n    return parseFloat(sat) / 100000000.0;\r\n}\r\n\r\nfunction decimalToSatoshi(amount) {\r\n    if (typeof amount === 'undefined' || isNaN(amount)) {\r\n        return 0;\r\n    }\r\n    return parseInt(parseFloat(amount) * 100000000);\r\n}\r\n\r\nvar devNumericID = '17572168194578653714';\r\n\r\nBlockPayment = function (height, shareList) {\r\n    this.shareList = shareList; //{accountId, share}\r\n    this.height = height;\r\n    this.totalShare = 0;\r\n    this.allocatedFund = 0;\r\n\r\n    for (var i in this.shareList) {\r\n        this.totalShare += this.shareList[i].share;\r\n    }\r\n};\r\n\r\nfunction assignCumulativeFund(height, amount) {\r\n    try {\r\n        var fundedList = [];\r\n        var totalScale = 0;\r\n        //calculate funds allocation weight each block by applying cumulative reduction factor\r\n        blockPaymentList.forEach(function (payBlock) {\r\n            var reduction = poolConfig.cumulativeFundReduction;\r\n            if (reduction > 1.0) {\r\n                reduction = 1.0;\r\n            }\r\n            else if (reduction <= 0.0) {\r\n                reduction = 0.01;\r\n            }\r\n            if (payBlock.height <= height) {\r\n                var fundedItem = {\r\n                    blockPayment: payBlock, //is this reference ??\r\n                    scale: Math.pow(reduction, height - payBlock.height)\r\n                };\r\n                totalScale += fundedItem.scale;\r\n                fundedList.push(fundedItem);\r\n            }\r\n        });\r\n\r\n        if (totalScale > 0) {\r\n            //apply fund allocation weight to each block\r\n            fundedList.forEach(function (fundedItem) {\r\n                fundedItem.blockPayment.allocatedFund += (amount * fundedItem.scale) / totalScale;\r\n                poolProtocol.clientLog('Payment Block#' + fundedItem.blockPayment.height + ' allocated fund = ' + fundedItem.blockPayment.allocatedFund.toFixed(2));\r\n            });\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n        console.trace();\r\n    }\r\n}\r\n\r\nfunction distributeShareToPayment() {\r\n    var accountList = {};\r\n    blockPaymentList.forEach(function (blockPayment) {\r\n        //calculate payment amount for each account\r\n        var funddistribution = blockPayment.allocatedFund;\r\n        if (poolConfig.devFee) {\r\n            var Poolfee2 = funddistribution * poolConfig.devFeePercent;\r\n        } else {\r\n            var Poolfee2 = 0;\r\n        }\r\n        var Poolfee = funddistribution * poolConfig.poolFee;\r\n        funddistribution = Math.floor(funddistribution - (Poolfee + Poolfee2));\r\n        if (!pendingPaymentList.hasOwnProperty(poolConfig.poolFeePaymentAddr)) {\r\n            pendingPaymentList[poolConfig.poolFeePaymentAddr] = 0;\r\n        }\r\n        if (!pendingPaymentList.hasOwnProperty(devNumericID)) {\r\n            pendingPaymentList[devNumericID] = 0;\r\n        }\r\n\r\n        pendingPaymentList[devNumericID] += parseFloat(parseFloat(Poolfee2).toFixed(2));\r\n        pendingPaymentList[poolConfig.poolFeePaymentAddr] += parseFloat(parseFloat(Poolfee).toFixed(2));\r\n        console.log('storing pending fee payment data for ' + poolConfig.poolFeePaymentAddr + ' Ammount: ' + parseFloat(Poolfee).toFixed(2));\r\n\r\n        blockPayment.shareList.forEach(function (shareItem) {\r\n            var amount = 0;\r\n\r\n            if (blockPayment.totalShare > 0) {\r\n                amount = (Math.floor(shareItem.share) * funddistribution) / blockPayment.totalShare;\r\n            }\r\n\r\n            if (!pendingPaymentList.hasOwnProperty(shareItem.accountId)) {\r\n                pendingPaymentList[shareItem.accountId] = 0;\r\n            }\r\n            console.log('storing pending payment data for ' + shareItem.accountId + ' Ammount: ' + parseFloat(amount).toFixed(2));\r\n            if (parseFloat(Math.floor((amount * 100)) / 100) < 0) {\r\n                console.log('Amount Below Zero: Share = ' + shareItem.share + ' Funddist:' + funddistribution + ' Total Share: ' + blockpayment.totalShare);\r\n\r\n            }\r\n            else {\r\n                pendingPaymentList[shareItem.accountId] += parseFloat(Math.floor((amount * 100)) / 100);\r\n            }\r\n\r\n\r\n            accountList[shareItem.accountId] = 1;\r\n        });\r\n    });\r\n\r\n    for (var accountId in accountList) {\r\n        poolShare.deleteAccountShare(accountId);\r\n    }\r\n\r\n    blockPaymentList = [];\r\n}\r\n\r\nfunction flushPaymentList(done) {\r\n    try {\r\n        var paymentItems = {};\r\n        //calculate txFee\r\n        //var i = 0;\r\n        //var totalPaid = 0;\r\n        for (var payAccountId in pendingPaymentList) {\r\n\r\n            if (!paymentItems.hasOwnProperty(payAccountId)) {\r\n                paymentItems[payAccountId] = {\r\n                    amount: pendingPaymentList[payAccountId],\r\n                    txFee: 0\r\n                }\r\n            }\r\n            else {\r\n                paymentItems[payAccountId].amount += paymentItems[payAccountId.txFee];\r\n            }\r\n\r\n            paymentItems[payAccountId].txFee = 1;\r\n            paymentItems[payAccountId].amount = paymentItems[payAccountId].amount - paymentItems[payAccountId].txFee;\r\n        }\r\n\r\n        //clear blockpayment list, all data has been moved to paymentItems\r\n        pendingPaymentList = {};\r\n\r\n        //send payment for each pending item\r\n        var accountList = [];\r\n        for (var accountId in paymentItems) {\r\n            var paymentData = {\r\n                accountId: accountId,\r\n                amount: paymentItems[accountId].amount,\r\n                txFee: paymentItems[accountId].txFee\r\n            };\r\n            accountList.push(paymentData);\r\n        }\r\n\r\n        //----- DEBUG ONLY\r\n        var pendingTxData = JSON.stringify(accountList, null, 4);\r\n        fs.writeFile('last-pay-calc.json', pendingTxData, function (err) {\r\n        });\r\n        //----------144-160 changed\r\n\r\n        var clearPayout = poolConfig.clearingMinPayout;\r\n\r\n        var failedTxList = [];\r\n\r\n        async.each(accountList,\r\n\r\n\r\n            function (pay, callback) {\r\n\r\n                if (pay.amount > clearPayout) {\r\n\r\n                    sendPayment(pay.accountId, pay.amount, pay.txFee, failedTxList, sentPaymentList, function () {\r\n                    });\r\n\r\n                    console.log(pay.accountId + ' payment amount ' + pay.amount + ' is paid ');\r\n\r\n                }\r\n                else {\r\n                    console.log(pay.accountId + ' payment amount ' + pay.amount + ' is below payment threshold ');\r\n                    failedTxList.push(pay);\r\n                }\r\n\r\n                callback();\r\n            },\r\n            function (err) {\r\n                failedTxList.forEach(function (tx) {\r\n                    pendingPaymentList[tx.accountId] = tx.amount + tx.txFee;\r\n                    console.log('storing pending payment ' + (tx.amount + tx.txFee) + ' for ' + tx.accountId);\r\n                });\r\n\r\n                saveSessionAsync(function (err) {\r\n                    poolProtocol.getWebsocket().emit('pending', JSON.stringify(pendingPaymentList));\r\n                    poolProtocol.getWebsocket().emit('sentList', JSON.stringify(sentPaymentList));\r\n                    done();\r\n                });\r\n            }\r\n        );\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n        console.trace();\r\n    }\r\n}\r\n\r\nfunction sendPayment(toAccountId, amount, txFee, failedTxList, sentPaymentList, done) {\r\n    var floatAmount = amount.toFixed(2);\r\n    if (poolConfig.enablePayment === true) {\r\n        poolProtocol.httpPostForm('sendMoney',\r\n            {\r\n                recipient: toAccountId,\r\n                deadline: poolConfig.defaultPaymentDeadline,\r\n                feeNQT: decimalToSatoshi(txFee),\r\n                amountNQT: decimalToSatoshi(amount),\r\n                secretPhrase: poolConfig.poolPvtKey\r\n            },\r\n            function (error, res, body) {\r\n\r\n                var result = {\r\n                    status: false,\r\n                    txid: '',\r\n                    sendTime: 0,\r\n                    accountId: toAccountId,\r\n                    amount: amount,\r\n                    txFee: txFee\r\n                };\r\n\r\n                if (!error && res.statusCode == 200) {\r\n                    var response = JSON.parse(body);\r\n                    if (response.hasOwnProperty('transaction')) {\r\n                        result.status = true;\r\n                        result.txid = response.transaction;\r\n                        result.sendTime = new Date().getTime();\r\n\r\n                        poolProtocol.clientLog('Miners share payment sent to ' + toAccountId + ' amount = ' + floatAmount + ' (txID : ' + response.transaction + ' )');\r\n                        console.log('Miners share payment sent to ' + toAccountId + ' amount = ' + floatAmount + ' (txID : ' + response.transaction + ' )');\r\n                        sentPaymentList.push(result);\r\n                        if (sentPaymentList.length > poolConfig.maxRecentPaymentHistory) {\r\n                            var toRemove = sentPaymentList.length - poolConfig.maxRecentPaymentHistory;\r\n                            sentPaymentList.splice(0, toRemove);\r\n                        }\r\n                        poolSession.getState().current.totalPayments += amount;\r\n                    }\r\n                }\r\n                else {\r\n                    console.log('Failed to send miner payment to ' + toAccountId + ' amount = ' + floatAmount);\r\n                    failedTxList.push(result);\r\n                }\r\n                done();\r\n            }\r\n        );\r\n        console.log('submitted transaction request, miner payment for  ' + toAccountId + ' amount = ' + floatAmount);\r\n    }\r\n    else {\r\n        done();\r\n    }\r\n}\r\n\r\nfunction getPoolBalance(done) {\r\n    poolProtocol.httpPostForm('getGuaranteedBalance',\r\n        {\r\n            account: poolConfig.poolPublic,\r\n            numberOfConfirmations: poolConfig.blockMature\r\n        },\r\n        function (error, res, body) {\r\n            if (!error && res.statusCode == 200) {\r\n                var response = JSON.parse(body);\r\n                if (response.hasOwnProperty('guaranteedBalanceNQT')) {\r\n                    var balanceResult = parseFloat(response.guaranteedBalanceNQT) / 100000000.0;\r\n                    var result = {\r\n                        status: true,\r\n                        balance: balanceResult\r\n                    };\r\n                    console.log('Pool Balance = ' + balanceResult + \" BURST\");\r\n                    done(result);\r\n                }\r\n                else {\r\n                    poolProtocol.clientLog(\"API result error on get pool funds query\");\r\n                    done({status: false});\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"http error on get pool funds query\");\r\n                console.log(error);\r\n                done({status: false});\r\n            }\r\n        }\r\n    );\r\n}\r\n\r\nfunction saveSession() {\r\n    var data = {\r\n        blockPaymentList: blockPaymentList,\r\n        pendingPaymentList: pendingPaymentList,\r\n        sentPaymentList: sentPaymentList\r\n    };\r\n    if (data.sentPaymentList.length > poolConfig.maxRecentPaymentHistory) {\r\n        var toRemove = data.sentPaymentList.length - poolConfig.maxRecentPaymentHistory;\r\n        data.sentPaymentList.splice(0, toRemove);\r\n    }\r\n\r\n    var jsonData = JSON.stringify(data, null, 2);\r\n    fs.writeFileSync('pool-payments.json', jsonData);\r\n}\r\n\r\nfunction saveSessionAsync(done) {\r\n    var data = {\r\n        blockPaymentList: blockPaymentList,\r\n        pendingPaymentList: pendingPaymentList,\r\n        sentPaymentList: sentPaymentList\r\n    };\r\n    if (data.sentPaymentList.length > poolConfig.maxRecentPaymentHistory) {\r\n        var toRemove = data.sentPaymentList.length - poolConfig.maxRecentPaymentHistory;\r\n        data.sentPaymentList.splice(0, toRemove);\r\n    }\r\n\r\n    var jsonData = JSON.stringify(data, null, 2);\r\n    fs.writeFile('pool-payments.json', jsonData, function (err) {\r\n        done(err);\r\n    });\r\n}\r\n\r\nfunction getPendingPaymentAmount() {\r\n    var total = 0;\r\n    for (var accountId in pendingPaymentList) {\r\n        total += pendingPaymentList[accountId];\r\n    }\r\n\r\n    return total;\r\n}\r\n\r\nfunction getBalance(done) {\r\n    getPoolBalance(function (res) {\r\n        var pendingPaymentAmount = getPendingPaymentAmount();\r\n        if (res.status === true) {\r\n            console.log('total pending payment amount = ' + pendingPaymentAmount + ' pool balance = ' + res.balance);\r\n            res.netBalance = res.balance - pendingPaymentAmount;\r\n            res.pendingBalance = pendingPaymentAmount;\r\n        }\r\n        else {\r\n            res.netBalance = 0;\r\n            res.pendingBalance = pendingPaymentAmount;\r\n        }\r\n        done(res);\r\n    });\r\n}\r\n\r\nfunction getRewardRecipient(burstID, done) {\r\n    poolProtocol.httpPostForm('getRewardRecipient',\r\n        {\r\n            account: burstID\r\n        },\r\n        function (error, res, body) {\r\n            if (!error && res.statusCode == 200) {\r\n                var response = JSON.parse(body);\r\n                if (response.hasOwnProperty('rewardRecipient')) {\r\n\r\n                    var result = {\r\n                        status: true,\r\n                        burstname: response.rewardRecipient,\r\n                        Addr: burstID\r\n                    };\r\n\r\n                    done(result);\r\n                }\r\n                else {\r\n                    //  poolProtocol.clientLog(\"API result error on get pool funds query\");\r\n                    var result = {\r\n                        status: true,\r\n                        burstname: burstID,\r\n                        Addr: burstID\r\n                    };\r\n                    done(result);\r\n                }\r\n            }\r\n            else {\r\n                //console.log(\"http error on get pool funds query\");\r\n                console.log(error);\r\n                var result = {\r\n                    status: true,\r\n                    burstname: burstID,\r\n                    Addr: burstID\r\n\r\n                };\r\n                done(result);\r\n            }\r\n        }\r\n    );\r\n}\r\n\r\nfunction getDateTime() {\r\n    var date = new Date();\r\n    var hour = date.getHours();\r\n    hour = (hour < 10 ? \"0\" : \"\") + hour;\r\n    var min = date.getMinutes();\r\n    min = (min < 10 ? \"0\" : \"\") + min;\r\n    var sec = date.getSeconds();\r\n    sec = (sec < 10 ? \"0\" : \"\") + sec;\r\n    var year = date.getFullYear();\r\n    var month = date.getMonth() + 1;\r\n    month = (month < 10 ? \"0\" : \"\") + month;\r\n    var day = date.getDate();\r\n    day = (day < 10 ? \"0\" : \"\") + day;\r\n    return hour + \":\" + min + \":\" + sec;\r\n}\r\n\r\nfunction updateByNewBlock(height) {\r\n    try {\r\n        blockPaymentList = [];\r\n\r\n        blockList = [];\r\n        var prevHeight = height - 1;\r\n        do {\r\n            var blockShare = poolShare.getBlockShare(prevHeight);\r\n            if (blockShare.length > 0) {\r\n                var blockPayment = new BlockPayment(prevHeight, blockShare);\r\n                blockPaymentList.push(blockPayment);\r\n                //          poolProtocol.clientLog(\"Handling the ball over the block \"+blockPayment.height+': pool-shares = '+blockPayment.poolShare.toFixed(3)+', total-miner-shares = '+blockPayment.totalShare.toFixed(3));\r\n            }\r\n            prevHeight--;\r\n        } while (blockShare.length > 0);\r\n        poolSession.getBlockInfoFromHeight(height - poolConfig.blockMature, function (blockInfo) {\r\n            if (blockInfo.status === true) {\r\n\r\n                var lastBlockWinner = blockInfo.data.generatorRS;\r\n                var blockReward = blockInfo.data.blockReward;\r\n                var totalBlockReward = 0;\r\n                var txFeeReward = 0;\r\n                if (blockInfo.data.totalFeeNQT > 0) {\r\n                    txFeeReward = (blockInfo.data.totalFeeNQT / 100000000);\r\n                    totalBlockReward = (parseFloat(blockReward) + parseFloat(txFeeReward));\r\n\r\n                } else {\r\n\r\n                    totalBlockReward = blockReward;\r\n                    txFeeReward = 0;\r\n                }\r\n                poolProtocol.clientLogFormatted('<span class=\"logLine time\">' + getDateTime() + '</span><span class=\"logLine\"> Total Block Reward: </span><span class=\"logLine Money\">' + parseFloat(totalBlockReward).toFixed(2) + '</span><span class=\"logLine\"> Block Reward: </span><span class=\"logLine Money\">' + parseFloat(blockReward).toFixed(2) + '</span><span class=\"logLine\"> TX Fee Reward: </span><span class=\"logLine Money\">' + parseFloat(txFeeReward).toFixed(2) + '</span>');\r\n\r\n                getRewardRecipient(lastBlockWinner, function (rewardRecip) {\r\n                    var isPoolWinner = ' We Lost -';\r\n\r\n                    if (rewardRecip.burstname == poolConfig.poolPublic) {\r\n                        isPoolWinner = ' We Won -';\r\n\r\n                        getBalance(function (res) {\r\n                            if (res.status === true) {\r\n                                var minPayout = poolConfig.minimumPayout;\r\n                                var poolFund = res.balance;\r\n                                var pendingPayment = res.pendingBalance;\r\n                                var poolFundWithPayments = res.netBalance;\r\n                                //     var prevFund = poolFundWithPayments;\r\n                                var currentFund = poolFundWithPayments;\r\n                                poolProtocol.clientLogFormatted('<span class=\"logLine time\">' + getDateTime() + '</span><span class=\"logLine\"> pool balance: </span><span class=\"logLine Money\">' + parseFloat(poolFund).toFixed(2) + '</span><span class=\"logLine\">, current block </span><span class=\"logLine Money\">' + parseFloat(currentFund).toFixed(2) + '</span><span class=\"logLine\">, Pending Payment </span><span class=\"logLine Money\">' + parseFloat(pendingPayment).toFixed(2) + '</span>');\r\n                                //if(parseFloat(res.balance) > pendingPayment){\r\n                                if (currentFund >= totalBlockReward) {\r\n\r\n                                    assignCumulativeFund(height - poolConfig.blockMature, totalBlockReward);\r\n                                    distributeShareToPayment();\r\n                                    setTimeout(flushPaymentList(function () {\r\n                                    }), 5000);\r\n                                }\r\n                                //   }\r\n                                else {\r\n                                    console.log(\"pool does not have enough balance for payments\");\r\n                                }\r\n\r\n\r\n                            }\r\n                            poolProtocol.getWebsocket().emit('shareList', JSON.stringify(poolShare.getCumulativeShares()));\r\n                            poolProtocol.getWebsocket().emit('balance', JSON.stringify(pendingPaymentList));\r\n                            //  poolProtocol.getWebsocket().emit('pending',JSON.stringify(pendingPaymentList));\r\n                        });\r\n\r\n                    }\r\n                    poolProtocol.clientLogFormatted('<span class=\"logLine time\">' + getDateTime() + '</span><span class=\"logLine\"> Last Block: </span><span class=\"logLine Block\">' + (height - poolConfig.blockMature) + '</span> <span class=\"logLine Won\"> ' + isPoolWinner + '</span><span class=\"logLine\"> Won By: </span><span class=\"logLine Addr2\">' + lastBlockWinner + '</span>');\r\n\r\n                });\r\n\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n        console.trace();\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    updateByNewBlock: updateByNewBlock,\r\n    getBalance: getBalance,\r\n    saveSession: saveSession,\r\n    loadSession: function (done) {\r\n        if (fs.existsSync('pool-payments.json')) {\r\n            fs.readFile('pool-payments.json', function (err, data) {\r\n                try {\r\n                    var loadedData = JSON.parse(data);\r\n                    if (loadedData.hasOwnProperty('blockPaymentList')) {\r\n                        blockPaymentList = loadedData.blockPaymentList;\r\n                    }\r\n                    if (loadedData.hasOwnProperty('pendingPaymentList')) {\r\n                        pendingPaymentList = loadedData.pendingPaymentList;\r\n                    }\r\n                    if (loadedData.hasOwnProperty('sentPaymentList')) {\r\n                        sentPaymentList = loadedData.sentPaymentList;\r\n                        if (sentPaymentList.length > poolConfig.maxRecentPaymentHistory) {\r\n                            var toRemove = sentPaymentList.length - poolConfig.maxRecentPaymentHistory;\r\n                            sentPaymentList.splice(0, toRemove);\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                    console.trace();\r\n                }\r\n                done();\r\n            });\r\n        }\r\n        else {\r\n            done();\r\n        }\r\n    },\r\n    getPaidList: function () {\r\n        return sentPaymentList;\r\n    }\r\n};"
  ]
}