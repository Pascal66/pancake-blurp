{
  "version": 3,
  "sources": [
    "burst-pool-share.js"
  ],
  "names": [
    "config",
    "require",
    "poolSession",
    "poolProtocol",
    "fs",
    "duplicate",
    "obj",
    "JSON",
    "parse",
    "stringify",
    "fromDeadline",
    "deadline",
    "blockBaseTarget",
    "B0",
    "parseFloat",
    "getGenesisBaseTarget",
    "B",
    "D",
    "Pd",
    "poolDiff",
    "Math",
    "pow",
    "poolDiffCurve",
    "fromDeadlineCurrentBlock",
    "getCurrentBaseTarget",
    "RoundShare",
    "accountId",
    "height",
    "baseTarget",
    "share",
    "lastUpdate",
    "prototype",
    "updateByNewDeadline",
    "assignedShare",
    "oldShare",
    "substractShare",
    "sharePenalty",
    "Date",
    "getTime",
    "updateByNewBlock",
    "addShare",
    "isNaN",
    "AccountShare",
    "id",
    "currentRoundShare",
    "prevRoundShare",
    "loadFromJSON",
    "json",
    "i",
    "roundShare",
    "newRoundShare",
    "push",
    "unshift",
    "getShareOnBlock",
    "length",
    "deleteRoundShareByDistance",
    "distance",
    "blockExpired",
    "clientLog",
    "splice",
    "getShare",
    "PoolShare",
    "accountShare",
    "accountShareIdIndex",
    "poolShare",
    "userShare",
    "hasOwnProperty",
    "poolFee",
    "addShareToAccount",
    "poolFeePaymentAddr",
    "isAccountIdAssignedToPool",
    "newAccountShare",
    "getCurrentBlockHeight",
    "getBlockShare",
    "shareList",
    "account",
    "shareItem",
    "getShares",
    "blockShareList",
    "roundShareList",
    "concat",
    "getCurrentRoundShares",
    "totalShare",
    "bestDeadline",
    "submitters",
    "bestDeadlineAccount",
    "getCumulativeShares",
    "cumulativeShare",
    "forEach",
    "roundCount",
    "getAccountShare",
    "deleteAccount",
    "ndx",
    "indexOf",
    "deleteAccountShare",
    "deleteAccountShareBelowThresshold",
    "shareAmount",
    "numOfRound",
    "console",
    "log",
    "substractShareFromAccount",
    "module",
    "exports",
    "saveSession",
    "poolShareData",
    "writeFileSync",
    "loadSession",
    "done",
    "existsSync",
    "readFile",
    "err",
    "data",
    "loadedData",
    "e",
    "trace",
    "shareFromDeadline"
  ],
  "mappings": "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",
  "file": "burst-pool-share.js",
  "sourcesContent": [
    "var config = require('./burst-pool-config');\r\nvar poolSession = require('./burst-pool-session');\r\nvar poolProtocol = require('./burst-pool-protocol');\r\nvar fs = require('fs');\r\n\r\nfunction duplicate(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nfunction fromDeadline(deadline, blockBaseTarget) {\r\n    //S:share, D:deadline, Pd:poolDiff, T:netDiff, B:netBasetarget, B0:netBaseTarget-Block0\r\n    //S(D) = 100 / ( (D*B0)/(Pd*B) + 1)^5\r\n    // 100\r\n    // ----\r\n    // ( D*Nd / Pd + 1 )^3  ---->  ( D * (B0/B) / Pd  )\r\n    var B0 = parseFloat(poolSession.getGenesisBaseTarget());\r\n    var B = parseFloat(blockBaseTarget);\r\n    var D = parseFloat(deadline);\r\n    var Pd = parseFloat(config.poolDiff);\r\n\r\n    return 1000 / Math.pow((D * B0) / (Pd * B) + 1, config.poolDiffCurve);\r\n}\r\n\r\nfunction fromDeadlineCurrentBlock(deadline) {\r\n    return fromDeadline(deadline, poolSession.getCurrentBaseTarget());\r\n}\r\n\r\nRoundShare = function (accountId, height, baseTarget) {\r\n    this.accountId = accountId;\r\n    this.baseTarget = baseTarget;\r\n    this.height = height;\r\n    this.share = 0;\r\n    this.deadline = -1;\r\n    this.lastUpdate = 0;\r\n};\r\n\r\nRoundShare.prototype.updateByNewDeadline = function (deadline) {\r\n    var assignedShare = 0;\r\n\r\n    if (this.deadline < 0) {\r\n        this.deadline = deadline;\r\n        var oldShare = this.share;\r\n        this.share = fromDeadlineCurrentBlock(deadline);\r\n        assignedShare = this.share - oldShare;\r\n    }\r\n    else if (deadline < this.deadline) {\r\n        this.deadline = deadline;\r\n        var oldShare = this.share;\r\n        this.share = fromDeadlineCurrentBlock(deadline);\r\n        assignedShare = this.share - oldShare;\r\n    }\r\n    else if (deadline > this.deadline) {\r\n        this.substractShare(config.sharePenalty);\r\n        assignedShare = 0;\r\n    }\r\n    this.lastUpdate = new Date().getTime();\r\n    return assignedShare;\r\n};\r\n\r\nRoundShare.prototype.updateByNewBlock = function (height, baseTarget) {\r\n    this.baseTarget = baseTarget;\r\n    this.height = height;\r\n    this.share = 0;\r\n    this.deadline = -1;\r\n    this.lastUpdate = new Date().getTime();\r\n};\r\n\r\nRoundShare.prototype.addShare = function (share) {\r\n    if (typeof share != 'undefined' && !isNaN(share)) {\r\n        this.share += share;\r\n    }\r\n};\r\n\r\nRoundShare.prototype.substractShare = function (share) {\r\n    if (typeof share != 'undefined' && !isNaN(share)) {\r\n        if (this.share < share) {\r\n            this.share = 0;\r\n        }\r\n        else {\r\n            this.share -= share;\r\n        }\r\n    }\r\n};\r\n\r\nAccountShare = function (accountId, height, baseTarget) {\r\n    this.id = accountId;\r\n    this.currentRoundShare = new RoundShare(accountId, height, baseTarget);\r\n    this.prevRoundShare = [];\r\n};\r\n\r\nAccountShare.prototype.loadFromJSON = function (json) {\r\n    this.currentRoundShare = new RoundShare(json.currentRoundShare.accountId, json.currentRoundShare.height, json.currentRoundShare.baseTarget);\r\n    this.prevRoundShare = [];\r\n    for (var i in json.prevRoundShare) {\r\n        var roundShare = json.prevRoundShare[i];\r\n        var newRoundShare = new RoundShare(roundShare.accountId, roundShare.height, roundShare.baseTarget);\r\n        newRoundShare.share = roundShare.share;\r\n        newRoundShare.deadline = roundShare.deadline;\r\n        newRoundShare.lastUpdate = roundShare.lastUpdate;\r\n        this.prevRoundShare.push(newRoundShare);\r\n    }\r\n    ;\r\n};\r\n\r\nAccountShare.prototype.updateByNewBlock = function (height, baseTarget) {\r\n    this.prevRoundShare.unshift(duplicate(this.currentRoundShare));\r\n    this.currentRoundShare.updateByNewBlock(height, baseTarget);\r\n};\r\n\r\nAccountShare.prototype.updateByNewDeadline = function (deadline) {\r\n    return this.currentRoundShare.updateByNewDeadline(deadline);\r\n};\r\n\r\nAccountShare.prototype.getShareOnBlock = function (height) {\r\n    if (this.currentRoundShare.height == height) {\r\n        return this.currentRoundShare.share;\r\n    }\r\n    else {\r\n        for (var i = 0; i < this.prevRoundShare.length; i++) {\r\n            if (this.prevRoundShare[i].height == height) {\r\n                return this.prevRoundShare[i].share;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nAccountShare.prototype.deleteRoundShareByDistance = function (distance) {\r\n    if (this.prevRoundShare.length > distance) {\r\n        var blockExpired = this.currentRoundShare.height - distance;\r\n        poolProtocol.clientLog('Account ' + this.currentRoundShare.accountId + ' share below Block#' + blockExpired + ' is expired');\r\n        this.prevRoundShare.splice(distance, this.prevRoundShare.length - distance);\r\n    }\r\n};\r\n\r\nAccountShare.prototype.getShare = function () {\r\n    return this.currentRoundShare.share;\r\n};\r\n\r\nAccountShare.prototype.addShare = function (share) {\r\n    this.currentRoundShare.addShare(share);\r\n};\r\n\r\nAccountShare.prototype.substractShare = function (share) {\r\n    this.currentRoundShare.substractShare(share);\r\n};\r\n\r\n\r\nPoolShare = function () {\r\n    this.accountShare = [];\r\n    this.accountShareIdIndex = {};\r\n};\r\n\r\nPoolShare.prototype.updateByNewDeadline = function (accountId, deadline) {\r\n    var share;\r\n    var poolShare;\r\n    var userShare = 0;\r\n    if (this.accountShareIdIndex.hasOwnProperty(accountId)) {\r\n        share = this.accountShareIdIndex[accountId].updateByNewDeadline(deadline);\r\n        userShare = this.accountShareIdIndex[accountId].getShare();\r\n        poolShare = share * config.poolFee;\r\n        this.addShareToAccount(config.poolFeePaymentAddr, poolShare);\r\n    }\r\n    else {\r\n        if (poolSession.isAccountIdAssignedToPool(accountId)) {\r\n            var newAccountShare = new AccountShare(accountId, poolSession.getCurrentBlockHeight(), poolSession.getCurrentBaseTarget());\r\n            share = newAccountShare.updateByNewDeadline(deadline);\r\n            this.accountShare.push(accountId);\r\n            this.accountShareIdIndex[accountId] = newAccountShare;\r\n            userShare = this.accountShareIdIndex[accountId].getShare();\r\n            poolShare = share * config.poolFee;\r\n            this.addShareToAccount(config.poolFeePaymentAddr, poolShare);\r\n        }\r\n    }\r\n    //console.log(\"share #\"+poolSession.getCurrentBlockHeight()+' '+accountId+' ('+userShare.toFixed(4)+') D:'+deadline+'secs S:'+share.toFixed(4)+' PS:'+poolShare.toFixed(4));\r\n};\r\n\r\nPoolShare.prototype.updateByNewBlock = function (height, baseTarget) {\r\n    for (var accountId in this.accountShareIdIndex) {\r\n        this.accountShareIdIndex[accountId].updateByNewBlock(height, baseTarget);\r\n    }\r\n};\r\n\r\nPoolShare.prototype.getBlockShare = function (height) {\r\n    var shareList = [];\r\n    for (var accountId in this.accountShareIdIndex) {\r\n        var account = this.accountShareIdIndex[accountId];\r\n        var accountShare = account.getShareOnBlock(height);\r\n        var shareItem = {\r\n            accountId: accountId,\r\n            share: accountShare\r\n        };\r\n        if (shareItem.share > 0) {\r\n            shareList.push(shareItem);\r\n        }\r\n    }\r\n    return shareList;\r\n};\r\n\r\nPoolShare.prototype.getShares = function () {\r\n    var blockShareList = {};\r\n    for (var accountId in this.accountShareIdIndex) {\r\n        var roundShareList = [];\r\n        roundShareList.push(this.accountShareIdIndex[accountId].currentRoundShare);\r\n        roundShareList = roundShareList.concat(this.accountShareIdIndex[accountId].prevRoundShare);\r\n        blockShareList[accountId] = duplicate(roundShareList);\r\n    }\r\n    return blockShareList;\r\n};\r\n\r\nPoolShare.prototype.getCurrentRoundShares = function () {\r\n    var blockShareList = {};\r\n    var totalShare = 0;\r\n    var bestDeadline = -1;\r\n    var submitters = 0;\r\n    var bestDeadlineAccount = 0;\r\n    for (var accountId in this.accountShareIdIndex) {\r\n        var roundShareList = [];\r\n        roundShareList.push(this.accountShareIdIndex[accountId].currentRoundShare);\r\n        blockShareList[accountId] = duplicate(roundShareList);\r\n        totalShare += this.accountShareIdIndex[accountId].currentRoundShare.share;\r\n\r\n        if (this.accountShareIdIndex[accountId].currentRoundShare.deadline > 0) {\r\n            if (bestDeadline == -1) {\r\n                bestDeadline = this.accountShareIdIndex[accountId].currentRoundShare.deadline;\r\n                bestDeadlineAccount = accountId;\r\n            }\r\n            else if (bestDeadline > this.accountShareIdIndex[accountId].currentRoundShare.deadline) {\r\n                bestDeadline = this.accountShareIdIndex[accountId].currentRoundShare.deadline;\r\n                bestDeadlineAccount = accountId;\r\n            }\r\n        }\r\n        submitters++;\r\n    }\r\n    blockShareList.totalShare = totalShare;\r\n    blockShareList.bestDeadline = bestDeadline;\r\n    blockShareList.submitters = submitters;\r\n    blockShareList.bestDeadlineAccount = bestDeadlineAccount;\r\n    return blockShareList;\r\n};\r\n\r\nPoolShare.prototype.getCumulativeShares = function () {\r\n    var blockShareList = this.getShares();\r\n    var cumulativeShare = {};\r\n    for (var accountId in blockShareList) {\r\n        var shareList = blockShareList[accountId];\r\n        shareList.forEach(function (share) {\r\n            if (cumulativeShare.hasOwnProperty(accountId)) {\r\n                cumulativeShare[accountId].share += share.share;\r\n                cumulativeShare[accountId].roundCount++;\r\n                if (share.deadline > 0) {\r\n                    if (cumulativeShare[accountId].deadline < 0) {\r\n                        cumulativeShare[accountId].deadline = share.deadline;\r\n                    }\r\n                    else if (share.deadline < cumulativeShare[accountId].deadline) {\r\n                        cumulativeShare[accountId].deadline = share.deadline;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                cumulativeShare[accountId] = share;\r\n                cumulativeShare[accountId].roundCount = 1;\r\n            }\r\n        });\r\n    }\r\n    return cumulativeShare;\r\n};\r\n\r\nPoolShare.prototype.getAccountShare = function (accountId) {\r\n    if (this.accountShareIdIndex.hasOwnProperty(accountId)) {\r\n        var accountShare = this.accountShareIdIndex[accountId];\r\n        return accountShare.currentRoundShare;\r\n    }\r\n    return null;\r\n};\r\n\r\nPoolShare.prototype.deleteAccount = function (accountId) {\r\n    if (this.accountShareIdIndex.hasOwnProperty(accountId)) {\r\n        delete this.accountShareIdIndex[accountId];\r\n        var ndx = this.accountShare.indexOf(accountId);\r\n        if (ndx >= 0) {\r\n            this.accountShare.splice(ndx, 1);\r\n        }\r\n    }\r\n};\r\n\r\nPoolShare.prototype.deleteAccountShare = function (accountId) {\r\n    if (this.accountShareIdIndex.hasOwnProperty(accountId)) {\r\n        var accountShare = this.accountShareIdIndex[accountId];\r\n        accountShare.prevRoundShare = [];\r\n    }\r\n};\r\n\r\nPoolShare.prototype.deleteAccountShareBelowThresshold = function (shareAmount, numOfRound) {\r\n    var cumulativeShare = this.getCumulativeShares();\r\n    for (var accountId in cumulativeShare) {\r\n        if (cumulativeShare[accountId].share < shareAmount &&\r\n            cumulativeShare[accountId].roundCount > numOfRound) {\r\n            this.deleteAccount(accountId);\r\n            console.log(\"deleted account \" + accountId + \" because of low share\");\r\n        }\r\n    }\r\n};\r\n\r\nPoolShare.prototype.deleteRoundShareByDistance = function (distance) {\r\n    for (var accountId in this.accountShareIdIndex) {\r\n        var account = this.accountShareIdIndex[accountId];\r\n        account.deleteRoundShareByDistance(distance);\r\n    }\r\n};\r\n\r\nPoolShare.prototype.addShareToAccount = function (accountId, share) {\r\n    if (this.accountShareIdIndex.hasOwnProperty(accountId)) {\r\n        this.accountShareIdIndex[accountId].addShare(share);\r\n    }\r\n    else {\r\n        if (poolSession.isAccountIdAssignedToPool(accountId)) {\r\n            var newAccountShare = new AccountShare(accountId, poolSession.getCurrentBlockHeight(), poolSession.getCurrentBaseTarget());\r\n            newAccountShare.addShare(share);\r\n            this.accountShare.push(accountId);\r\n            this.accountShareIdIndex[accountId] = newAccountShare;\r\n        }\r\n    }\r\n};\r\n\r\nPoolShare.prototype.substractShareFromAccount = function (accountId, share) {\r\n    if (this.accountShareIdIndex.hasOwnProperty(accountId)) {\r\n        this.accountShareIdIndex[accountId].substractShare(share);\r\n    }\r\n};\r\n\r\nvar poolShare = new PoolShare();\r\n\r\nmodule.exports = {\r\n    addShareToAccount: function (accountId, share) {\r\n        poolShare.addShareToAccount(accountId, accountId);\r\n    },\r\n    updateByNewBlock: function (height, baseTarget) {\r\n        poolShare.updateByNewBlock(height, baseTarget);\r\n    },\r\n    updateByNewDeadline: function (accountId, deadline) {\r\n        poolShare.updateByNewDeadline(accountId, deadline);\r\n    },\r\n    getBlockShare: function (height) {\r\n        return poolShare.getBlockShare(height);\r\n    },\r\n    getShares: function () {\r\n        return poolShare.getShares();\r\n    },\r\n    getCumulativeShares: function () {\r\n        return poolShare.getCumulativeShares();\r\n    },\r\n    getAccountShare: function (accountId) {\r\n        return poolShare.getAccountShare(accountId);\r\n    },\r\n    saveSession: function () {\r\n        var poolShareData = JSON.stringify(poolShare, null, 2);\r\n        fs.writeFileSync('pool-share.json', poolShareData);\r\n    },\r\n    getCurrentRoundShares: function () {\r\n        return poolShare.getCurrentRoundShares();\r\n    },\r\n    deleteAccountShare: function (accountId) {\r\n        poolShare.deleteAccountShare(accountId);\r\n    },\r\n    deleteRoundShareByDistance: function (distance) {\r\n        poolShare.deleteRoundShareByDistance(distance);\r\n    },\r\n    deleteAccountShareBelowThresshold: function (shareAmount, numOfRound) {\r\n        poolShare.deleteAccountShareBelowThresshold(shareAmount, numOfRound);\r\n    },\r\n    deleteAccount: function (accountId) {\r\n        poolShare.deleteAccount(accountId);\r\n    },\r\n    loadSession: function (done) {\r\n        if (fs.existsSync('pool-share.json')) {\r\n            fs.readFile('pool-share.json', function (err, data) {\r\n                try {\r\n                    var loadedData = JSON.parse(data);\r\n                    if (loadedData.hasOwnProperty('accountShare')) {\r\n                        poolShare.accountShare = loadedData.accountShare;\r\n                    }\r\n                    if (loadedData.hasOwnProperty('accountShareIdIndex')) {\r\n                        for (var accountId in loadedData.accountShareIdIndex) {\r\n                            var accountShare = loadedData.accountShareIdIndex[accountId];\r\n                            poolShare.accountShareIdIndex[accountId] = new AccountShare(0, 0, 0);\r\n                            poolShare.accountShareIdIndex[accountId].accountId = accountId;\r\n                            poolShare.accountShareIdIndex[accountId].loadFromJSON(accountShare);\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                    console.trace();\r\n                }\r\n                done();\r\n            });\r\n        }\r\n        else {\r\n            done();\r\n        }\r\n    },\r\n    shareFromDeadline: fromDeadline\r\n};"
  ]
}