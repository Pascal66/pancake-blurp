{
  "version": 3,
  "sources": [
    "burst-pool-session.js"
  ],
  "names": [
    "request",
    "require",
    "config",
    "async",
    "jsonFormat",
    "fs",
    "sessionState",
    "currentWalletNdx",
    "genesisBlockId",
    "genesisBaseTarget",
    "genesisBlockTimestamp",
    "current",
    "blockHeight",
    "baseTarget",
    "startTime",
    "totalShare",
    "submitters",
    "bestDeadline",
    "totalPayments",
    "netDiff",
    "prevBlocks",
    "getWalletUrl",
    "wallets",
    "length",
    "walletUrl",
    "getConstants",
    "done",
    "post",
    "url",
    "form",
    "requestType",
    "error",
    "res",
    "body",
    "result",
    "status",
    "msg",
    "statusCode",
    "bodyJson",
    "JSON",
    "parse",
    "hasOwnProperty",
    "console",
    "log",
    "e",
    "getGenesisBlock",
    "block",
    "blockId",
    "getConstant",
    "walletConstant",
    "getBlockchainTime",
    "error2",
    "res2",
    "body2",
    "currentTime",
    "Date",
    "getTime",
    "blockTimestamp",
    "parseInt",
    "time",
    "miningInfoCache",
    "getMiningInfo",
    "error3",
    "res3",
    "body3",
    "miningInfo",
    "getGenesisBaseTarget",
    "getCurrentBaseTarget",
    "isAccountIdAssignedToPool",
    "accountId",
    "switchNextWallet",
    "walletIndex",
    "getBlockInfoFromHeight",
    "height",
    "data",
    "unixTimestamp",
    "timestamp",
    "getBlockInfo",
    "getLastBlockId",
    "updateCurrentBlockState",
    "lastBlock",
    "result2",
    "blockInfo",
    "module",
    "exports",
    "getCurrentBlockHeight",
    "getPoolDiff",
    "B0",
    "parseFloat",
    "B",
    "Pd",
    "poolDiff",
    "getNetDiff",
    "getState",
    "updateByNewBlock",
    "unshift",
    "stringify",
    "toRemove",
    "splice",
    "getMiningInfoCache",
    "getCurrentRoundStartTime",
    "setWalletNdx",
    "ndx",
    "getWalletNdx",
    "init",
    "loadSession",
    "parallel",
    "callback",
    "roundStartTime",
    "err",
    "results",
    "saveSession",
    "jsonData",
    "writeFileSync",
    "existsSync",
    "readFile",
    "loadedData",
    "trace"
  ],
  "mappings": "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",
  "file": "burst-pool-session.js",
  "sourcesContent": [
    "var request = require('request');\r\nvar config = require('./burst-pool-config');\r\nvar async = require('async');\r\nvar jsonFormat = require('prettyjson');\r\nvar fs = require('fs');\r\n\r\nvar sessionState = {\r\n    currentWalletNdx: 0,\r\n    genesisBlockId: 0,\r\n    genesisBaseTarget: 0,\r\n    genesisBlockTimestamp: 0,\r\n    current: {\r\n        blockHeight: 0,\r\n        baseTarget: 0,\r\n        startTime: 0,\r\n        totalShare: 0,\r\n        submitters: 0,\r\n        bestDeadline: 0,\r\n        totalPayments: 0,\r\n        netDiff: 0\r\n    },\r\n    prevBlocks: []\r\n};\r\n\r\nfunction getWalletUrl() {\r\n    if (sessionState.currentWalletNdx < config.wallets.length) {\r\n        return config.wallets[sessionState.currentWalletNdx].walletUrl + '/burst';\r\n    }\r\n    else {\r\n        return config.wallets[0].walletUrl + '/burst';\r\n    }\r\n}\r\n\r\nfunction getConstants(done) {\r\n    request.post({\r\n            url: getWalletUrl(),\r\n            form: {requestType: 'getConstants'}\r\n        },\r\n        function (error, res, body) {\r\n            var result = {\r\n                status: false,\r\n                msg: ''\r\n            };\r\n            if (!error && res.statusCode == 200) {\r\n                try {\r\n                    var bodyJson = JSON.parse(body);\r\n                    if (bodyJson.hasOwnProperty('genesisBlockId')) {\r\n                        sessionState.genesisBlockId = bodyJson.genesisBlockId;\r\n                        console.log(\"genesis block id = \" + sessionState.genesisBlockId);\r\n                    }\r\n                    result.status = true;\r\n                    result.msg = bodyJson;\r\n                }\r\n                catch (e) {\r\n                    result.status = false;\r\n                }\r\n            }\r\n            done(result);\r\n        }\r\n    );\r\n}\r\n\r\nfunction getGenesisBlock(done) {\r\n    if (sessionState.genesisBlockId == 0) {\r\n        getConstants(function (res) {\r\n            if (res.status === true) {\r\n                getGenesisBlock(done);\r\n            }\r\n        })\r\n    }\r\n    else {\r\n        request.post(\r\n            {\r\n                url: getWalletUrl(),\r\n                form: {\r\n                    requestType: 'getBlock',\r\n                    block: sessionState.genesisBlockId\r\n                }\r\n            },\r\n            function (error, res, body) {\r\n                var result = {\r\n                    status: true,\r\n                    msg: null\r\n                };\r\n                if (!error && res.statusCode == 200) {\r\n                    try {\r\n                        result.msg = JSON.parse(body);\r\n                        result.msg.blockId = sessionState.genesisBlockId;\r\n                        if (result.msg.hasOwnProperty('baseTarget')) {\r\n                            sessionState.genesisBaseTarget = result.msg.baseTarget;\r\n                            console.log(\"genesis base target = \" + sessionState.genesisBaseTarget);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n\r\n                    }\r\n                }\r\n                else {\r\n                    result.status = false;\r\n                    result.msg = 'wallet error';\r\n                }\r\n                done(result);\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nfunction getConstant(done) {\r\n    request.post({\r\n            url: getWalletUrl(),\r\n            form: {requestType: 'getConstants'}\r\n        },\r\n        function (error, res, body) {\r\n            if (!error && res.statusCode == 200) {\r\n                sessionState.walletConstant = JSON.parse(body);\r\n            }\r\n            done();\r\n        }\r\n    );\r\n}\r\n\r\nfunction getBlockchainTime(done) {\r\n    request.post({\r\n            url: getWalletUrl(),\r\n            form: {requestType: 'getTime'}\r\n        },\r\n        function (error2, res2, body2) {\r\n            if (!error2 && res2.statusCode == 200) {\r\n                var currentTime = new Date().getTime();\r\n                var blockTimestamp = JSON.parse(body2);\r\n                sessionState.genesisBlockTimestamp = currentTime - parseInt(blockTimestamp.time) * 1000;\r\n\r\n                console.log('current timestamp ' + currentTime);\r\n                console.log(\"genesis-block blocktime \" + blockTimestamp.time);\r\n                console.log(\"genesis-block timestamp \" + sessionState.genesisBlockTimestamp);\r\n            }\r\n            done();\r\n        }\r\n    );\r\n}\r\n\r\nvar miningInfoCache = {};\r\nfunction getMiningInfo(done) {\r\n    request.post({\r\n            url: getWalletUrl(),\r\n            form: {requestType: 'getMiningInfo'}\r\n        },\r\n        function (error3, res3, body3) {\r\n            var result = {\r\n                status: false,\r\n                msg: ''\r\n            };\r\n            if (!error3 && res3.statusCode == 200) {\r\n                var miningInfo = JSON.parse(body3);\r\n                result.status = true;\r\n                result.msg = miningInfo;\r\n                miningInfoCache = miningInfo;\r\n            }\r\n            done(result);\r\n        }\r\n    );\r\n}\r\n\r\nfunction getGenesisBaseTarget() {\r\n    return sessionState.genesisBaseTarget;\r\n}\r\n\r\nfunction getCurrentBaseTarget() {\r\n    return sessionState.current.baseTarget;\r\n}\r\n\r\nfunction isAccountIdAssignedToPool(accountId) {\r\n    return true;\r\n}\r\n\r\nfunction switchNextWallet() {\r\n    if (config.wallets.length > 1) {\r\n        if (config.walletIndex + 1 < config.wallets.length) {\r\n            sessionState.walletIndex = sessionState.walletIndex + 1;\r\n            console.log('switch wallet to ' + config.wallets[config.walletIndex].walletUrl + ' [' + config.walletIndex + ']');\r\n        }\r\n        else {\r\n            sessionState.walletIndex = 0;\r\n            console.log('switch wallet to ' + config.wallets[config.walletIndex].walletUrl + ' [' + config.walletIndex + ']');\r\n        }\r\n    }\r\n}\r\n\r\nfunction getBlockInfoFromHeight(blockId, done) {\r\n    request.post({\r\n            url: config.wallets[sessionState.walletIndex].walletUrl + '/burst',\r\n            form: {\r\n                requestType: 'getBlock',\r\n                height: blockId\r\n            }\r\n        },\r\n        function (error3, res3, body3) {\r\n            var result = {\r\n                status: false,\r\n                data: {}\r\n            };\r\n            if (!error3 && res3.statusCode == 200) {\r\n                result.status = true;\r\n                result.data = JSON.parse(body3);\r\n                result.data.blockId = blockId;\r\n                result.data.unixTimestamp = sessionState.genesisBlockTimestamp + parseInt(result.data.timestamp) * 1000;\r\n            }\r\n            done(result);\r\n        }\r\n    );\r\n}\r\n\r\nfunction getBlockInfo(blockId, done) {\r\n    request.post({\r\n            url: config.wallets[sessionState.walletIndex].walletUrl + '/burst',\r\n            form: {\r\n                requestType: 'getBlock',\r\n                block: blockId\r\n            }\r\n        },\r\n        function (error3, res3, body3) {\r\n            var result = {\r\n                status: false,\r\n                data: {}\r\n            };\r\n            if (!error3 && res3.statusCode == 200) {\r\n                result.status = true;\r\n                result.data = JSON.parse(body3);\r\n                result.data.blockId = blockId;\r\n                result.data.unixTimestamp = sessionState.genesisBlockTimestamp + parseInt(result.data.timestamp) * 1000;\r\n            }\r\n            done(result);\r\n        }\r\n    );\r\n}\r\n\r\nfunction getLastBlockId(done) {\r\n    request.post({\r\n            url: config.wallets[sessionState.walletIndex].walletUrl + '/burst',\r\n            form: {\r\n                requestType: 'getBlockchainStatus'\r\n            }\r\n        },\r\n        function (error3, res3, body3) {\r\n            var result = {\r\n                status: false,\r\n                data: {}\r\n            };\r\n            if (!error3 && res3.statusCode == 200) {\r\n                result.status = true;\r\n                result.data = JSON.parse(body3);\r\n            }\r\n            done(result);\r\n        }\r\n    );\r\n}\r\n\r\nfunction updateCurrentBlockState(done) {\r\n    getLastBlockId(function (result) {\r\n        if (result.status === true) {\r\n            getBlockInfo(result.data.lastBlock, function (result2) {\r\n                if (result2.status === true) {\r\n                    sessionState.current.blockInfo = result2.data;\r\n                    sessionState.current.netDiff = sessionState.genesisBaseTarget / sessionState.current.blockInfo.baseTarget;\r\n                    sessionState.current.startTime = sessionState.current.blockInfo.unixTimestamp;\r\n                }\r\n                done(result2.status);\r\n            });\r\n        }\r\n        else {\r\n            done(false);\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = {\r\n    getWalletUrl: getWalletUrl,\r\n    getGenesisBaseTarget: getGenesisBaseTarget,\r\n    getCurrentBaseTarget: getCurrentBaseTarget,\r\n    getCurrentBlockHeight: function () {\r\n        return sessionState.current.blockHeight;\r\n    },\r\n    getPoolDiff: function () {\r\n        var B0 = parseFloat(getGenesisBaseTarget());\r\n        var B = parseFloat(sessionState.current.baseTarget);\r\n        var Pd = config.poolDiff;\r\n        var netDiff = B0 / B;\r\n        return netDiff / Pd;\r\n    },\r\n    getNetDiff: function () {\r\n        var B0 = parseFloat(getGenesisBaseTarget());\r\n        var B = parseFloat(sessionState.current.baseTarget);\r\n        return B0 / B;\r\n    },\r\n    getState: function () {\r\n        return sessionState;\r\n    },\r\n    getBlockInfo: getBlockInfo,\r\n    getLastBlockId: getLastBlockId,\r\n    getBlockInfoFromHeight: getBlockInfoFromHeight,\r\n    isAccountIdAssignedToPool: isAccountIdAssignedToPool,\r\n    switchNextWallet: switchNextWallet,\r\n    getMiningInfo: getMiningInfo,\r\n    updateByNewBlock: function (height, baseTarget, done) {\r\n        sessionState.prevBlocks.unshift(JSON.parse(JSON.stringify(sessionState.current)));\r\n        if (sessionState.prevBlocks.length > 30) {\r\n            var toRemove = sessionState.prevBlocks.length - 30;\r\n            sessionState.prevBlocks.splice(sessionState.prevBlocks.length - toRemove, toRemove);\r\n        }\r\n        sessionState.current.blockHeight = height;\r\n        sessionState.current.baseTarget = baseTarget;\r\n        sessionState.current.startTime = new Date().getTime();\r\n        sessionState.current.blockInfo = {};\r\n        sessionState.current.bestDeadline = -1;\r\n\r\n        updateCurrentBlockState(done);\r\n    },\r\n    getMiningInfoCache: function () {\r\n        return miningInfoCache;\r\n    },\r\n    getCurrentRoundStartTime: function () {\r\n        return sessionState.current.startTime;\r\n    },\r\n    setWalletNdx: function (ndx) {\r\n        sessionState.walletIndex = ndx;\r\n    },\r\n    getWalletNdx: function () {\r\n        sessionState.walletIndex++;\r\n        if (sessionState.walletIndex >= config.wallets.length) {\r\n            sessionState.walletIndex = 0;\r\n        }\r\n        return sessionState.walletIndex;\r\n    },\r\n    init: function (done) {\r\n        this.loadSession(function () {\r\n            async.parallel([\r\n                    function (callback) {\r\n                        getGenesisBlock(function (res) {\r\n                            callback();\r\n                        });\r\n                    },\r\n                    function (callback) {\r\n                        getConstant(function () {\r\n                            callback();\r\n                        })\r\n                    },\r\n                    function (callback) {\r\n                        getBlockchainTime(function () {\r\n                            callback();\r\n                        })\r\n                    },\r\n                    function (callback) {\r\n                        getMiningInfo(function (result) {\r\n                            var currentTime = new Date().getTime();\r\n                            sessionState.current.blockHeight = result.msg.height;\r\n                            sessionState.current.roundStartTime = currentTime;\r\n                            sessionState.current.baseTarget = result.msg.baseTarget;\r\n                            callback();\r\n                        })\r\n                    },\r\n                    function (callback) {\r\n                        updateCurrentBlockState(function (status) {\r\n                            callback();\r\n                        });\r\n                    }\r\n                ],\r\n                function (err, results) {\r\n                    done();\r\n                }\r\n            );\r\n        });\r\n    },\r\n    saveSession: function () {\r\n        var jsonData = JSON.stringify(sessionState, null, 2);\r\n        fs.writeFileSync('pool-session.json', jsonData);\r\n    },\r\n    loadSession: function (done) {\r\n        if (fs.existsSync('pool-session.json')) {\r\n            fs.readFile('pool-session.json', function (err, data) {\r\n                try {\r\n                    var loadedData = JSON.parse(data);\r\n                    sessionState = loadedData;\r\n                    if (sessionState.prevBlocks.length > 30) {\r\n                        var toRemove = sessionState.prevBlocks.length - 30;\r\n                        sessionState.prevBlocks.splice(sessionState.prevBlocks.length - toRemove, toRemove);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                    console.trace();\r\n                }\r\n                done();\r\n            });\r\n        }\r\n        else {\r\n            done();\r\n        }\r\n    }\r\n};"
  ]
}