{
  "version": 3,
  "sources": [
    "burst-pool.js"
  ],
  "names": [
    "fs",
    "require",
    "url",
    "moment",
    "config",
    "poolSession",
    "poolShare",
    "poolPayment",
    "poolProtocol",
    "async",
    "onNewBlock",
    "miningInfo",
    "clientLog",
    "clientLogJson",
    "updateByNewBlock",
    "height",
    "baseTarget",
    "deleteRoundShareByDistance",
    "maxRoundCount",
    "deleteAccountShareBelowThresshold",
    "saveSession",
    "logMiningRound",
    "console",
    "log",
    "getNetDiff",
    "getWebsocket",
    "emit",
    "JSON",
    "stringify",
    "getCumulativeShares",
    "getState",
    "prevBlocks",
    "e",
    "trace",
    "getDateTime",
    "date",
    "Date",
    "hour",
    "getHours",
    "min",
    "getMinutes",
    "sec",
    "getSeconds",
    "year",
    "getFullYear",
    "month",
    "getMonth",
    "day",
    "getDate",
    "socket",
    "blockHeight",
    "getCurrentBlockHeight",
    "roundStart",
    "getCurrentRoundStartTime",
    "currentTime",
    "getTime",
    "elapsed",
    "duration",
    "humanize",
    "roundShare",
    "getCurrentRoundShares",
    "submitters",
    "netDiff",
    "sessionState",
    "totalShare",
    "bestDeadline",
    "current",
    "toFixed",
    "bestDeadlineAccount",
    "clientUnicastLog",
    "onNonceSubmitReq",
    "req",
    "minerReq",
    "parse",
    "hasOwnProperty",
    "query",
    "requestType",
    "toLowerCase",
    "remoteAddr",
    "connection",
    "remoteAddress",
    "remotePort",
    "minerData",
    "nonce",
    "from",
    "xMiner",
    "parseInt",
    "headers",
    "accountId",
    "secretPhrase",
    "poolPvtKey",
    "urlPhrase",
    "replace",
    "isSubmitNonce",
    "isMiningInfo",
    "onNonceSubmitedRes",
    "res",
    "deadline",
    "process",
    "nextTick",
    "submission",
    "result",
    "updateByNewDeadline",
    "accountShare",
    "getAccountShare",
    "startTime",
    "minerPic",
    "startsWith",
    "clientLogFormatted",
    "onMiningInfoUpdate",
    "onNewClientConnected",
    "clientIp",
    "request",
    "clientPort",
    "on",
    "msg",
    "onWebsocketClientChat",
    "cumulativeShare",
    "getPaidList",
    "textMsg",
    "length",
    "substring",
    "initPool",
    "walletNdx",
    "setWalletNdx",
    "init",
    "parallel",
    "callback",
    "loadSession",
    "err",
    "results",
    "start",
    "setInterval",
    "getMiningInfo",
    "status",
    "walletIndex",
    "stdin",
    "resume",
    "exitHandler",
    "options",
    "cleanup",
    "stack",
    "exit",
    "bind"
  ],
  "mappings": "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",
  "file": "burst-pool.js",
  "sourcesContent": [
    "\r\nvar fs = require('fs');\r\nvar url = require('url');\r\nvar moment = require('moment');\r\nvar config = require('./burst-pool-config');\r\nvar poolSession = require('./burst-pool-session');\r\nvar poolShare = require('./burst-pool-share');\r\nvar poolPayment = require('./burst-pool-payment');\r\nvar poolProtocol = require('./burst-pool-protocol');\r\nvar async = require('async');\r\n\r\nfunction onNewBlock(miningInfo) {\r\n    poolProtocol.clientLog(\"new block :\");\r\n    poolProtocol.clientLogJson(miningInfo);\r\n\r\n    try {\r\n        poolSession.updateByNewBlock(miningInfo.height, miningInfo.baseTarget, function () {\r\n            poolShare.deleteRoundShareByDistance(config.maxRoundCount);\r\n            poolShare.deleteAccountShareBelowThresshold(1.0, config.maxRoundCount);\r\n            poolShare.saveSession();\r\n            poolShare.updateByNewBlock(miningInfo.height, miningInfo.baseTarget);\r\n            poolPayment.updateByNewBlock(miningInfo.height);\r\n            poolPayment.saveSession();\r\n            poolSession.saveSession();\r\n            logMiningRound();\r\n\r\n            console.log('new block #' + miningInfo.height + ' BT:' + miningInfo.baseTarget + ' ND:' + poolSession.getNetDiff());\r\n            poolProtocol.getWebsocket().emit('shareList', JSON.stringify(poolShare.getCumulativeShares()));\r\n            poolProtocol.getWebsocket().emit('blockHistory', JSON.stringify(poolSession.getState().prevBlocks));\r\n        });\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n        console.trace();\r\n    }\r\n}\r\n\r\nfunction getDateTime() {\r\n    var date = new Date();\r\n    var hour = date.getHours();\r\n    hour = (hour < 10 ? \"0\" : \"\") + hour;\r\n    var min = date.getMinutes();\r\n    min = (min < 10 ? \"0\" : \"\") + min;\r\n    var sec = date.getSeconds();\r\n    sec = (sec < 10 ? \"0\" : \"\") + sec;\r\n    var year = date.getFullYear();\r\n    var month = date.getMonth() + 1;\r\n    month = (month < 10 ? \"0\" : \"\") + month;\r\n    var day = date.getDate();\r\n    day = (day < 10 ? \"0\" : \"\") + day;\r\n    return hour + \":\" + min + \":\" + sec;\r\n}\r\n\r\nfunction logMiningRound(socket) {\r\n    var blockHeight = poolSession.getCurrentBlockHeight();\r\n    var roundStart = poolSession.getCurrentRoundStartTime();\r\n    var currentTime = new Date().getTime();\r\n    var elapsed = currentTime - roundStart;\r\n    var duration = moment.duration(elapsed).humanize(true);\r\n    var roundShare = poolShare.getCurrentRoundShares();\r\n    var submitters = roundShare.submitters;\r\n    var netDiff = poolSession.getNetDiff();\r\n    var sessionState = poolSession.getState();\r\n    var miningInfo = {\r\n        height: blockHeight,\r\n        currentTime: currentTime,\r\n        totalShare: roundShare.totalShare,\r\n        submitters: roundShare.submitters,\r\n        roundStart: roundStart,\r\n        netDiff: netDiff,\r\n        bestDeadline: sessionState.current.bestDeadline\r\n    };\r\n    sessionState.current.submitters = roundShare.submitters;\r\n    sessionState.current.totalShare = roundShare.totalShare;\r\n\r\n    if (typeof socket === 'undefined') {\r\n        poolProtocol.getWebsocket().emit('miningInfo', JSON.stringify(miningInfo));\r\n        poolProtocol.clientLog(\"round #\" + blockHeight + \" diff \" + netDiff.toFixed(1) + \", elapsed \" + duration + \", \" + submitters + \" Miners, total shares \" + roundShare.totalShare.toFixed(2) + ', best deadline ' + roundShare.bestDeadline + ' from ' + roundShare.bestDeadlineAccount);\r\n    }\r\n    else {\r\n        socket.emit('miningInfo', JSON.stringify(miningInfo));\r\n        poolProtocol.clientUnicastLog(socket, \"round #\" + blockHeight + \" diff \" + netDiff.toFixed(1) + \", elapsed \" + duration + \", \" + submitters + \" Miners, total shares \" + roundShare.totalShare.toFixed(2) + ', best deadline ' + roundShare.bestDeadline + ' from ' + roundShare.bestDeadlineAccount);\r\n    }\r\n}\r\n\r\nfunction onNonceSubmitReq(req) {\r\n\r\n    var minerReq = null;\r\n    try {\r\n        minerReq = url.parse(req.url, true);\r\n    }\r\n    catch (e) {\r\n        minerReq = null;\r\n    }\r\n\r\n    if (minerReq != null &&\r\n        minerReq.hasOwnProperty('query') &&\r\n        minerReq.query.hasOwnProperty('requestType')) {\r\n        if (minerReq.query.requestType.toLowerCase() == 'submitnonce') {\r\n            var remoteAddr = req.connection.remoteAddress + ':' + req.connection.remotePort;\r\n            var minerData = {\r\n                nonce: 0,\r\n                from: remoteAddr,\r\n                xMiner: ''\r\n\r\n            };\r\n            req.url = '/burst?requestType=submitNonce';\r\n\r\n            if (minerReq.query.hasOwnProperty('nonce')) {\r\n                req.url += '&nonce=' + minerReq.query.nonce;\r\n                minerData.nonce = parseInt(minerReq.query.nonce);\r\n            }\r\n            if (req.headers.hasOwnProperty('x-miner')) {\r\n                minerData.xMiner = req.headers['x-miner'];\r\n            }\r\n            if (minerReq.query.hasOwnProperty('accountId')) { //<------ POOL MINING\r\n                req.url += '&accountId=' + minerReq.query.accountId;\r\n                minerData.accountId = minerReq.query.accountId;\r\n\r\n                minerReq.query.secretPhrase = config.poolPvtKey;\r\n                req.url += '&secretPhrase=' + config.poolPvtKey;\r\n            }\r\n            else {\r\n                if (minerReq.query.hasOwnProperty('secretPhrase')) { //<----- SOLO MINING\r\n                    var urlPhrase = minerReq.query.secretPhrase.replace(/%2B|%2b/g, '+');\r\n                    req.url += '&secretPhrase=' + urlPhrase;\r\n                }\r\n            }\r\n\r\n            req.isSubmitNonce = true;\r\n            req.headers['content-length'] = \"0\";\r\n            req.minerData = minerData;\r\n        }\r\n        else if (minerReq.query.requestType.toLowerCase() == 'getmininginfo') {\r\n            req.isMiningInfo = true;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction onNonceSubmitedRes(req, res) {\r\n    if (req.hasOwnProperty('minerData')) {\r\n        if (res.hasOwnProperty('deadline') &&\r\n            req.minerData.hasOwnProperty('accountId')) {\r\n\r\n            var deadline = parseInt(res.deadline);\r\n            var accountId = req.minerData.accountId;\r\n            process.nextTick(function () {\r\n                req.minerData.deadline = deadline;\r\n                req.minerData.submission = res.result;\r\n\r\n                poolShare.updateByNewDeadline(accountId, deadline);\r\n\r\n                var accountShare = poolShare.getAccountShare(accountId);\r\n                if (accountShare != null) {\r\n                    poolProtocol.getWebsocket().emit('roundShares', JSON.stringify(accountShare));\r\n                }\r\n\r\n                var sessionState = poolSession.getState();\r\n\r\n                var currentTime = new Date().getTime();\r\n                var miningInfo = {\r\n                    height: sessionState.current.blockHeight,\r\n                    currentTime: currentTime,\r\n                    totalShare: sessionState.current.totalShare,\r\n                    submitters: sessionState.current.submitters,\r\n                    roundStart: sessionState.current.startTime,\r\n                    netDiff: poolSession.getNetDiff(),\r\n                    bestDeadline: sessionState.current.bestDeadline\r\n                };\r\n\r\n                if (sessionState.current.bestDeadline > deadline) {\r\n                    sessionState.current.bestDeadline = deadline;\r\n                    console.log('new best deadline ' + sessionState.current.bestDeadline);\r\n                    poolProtocol.getWebsocket().emit('miningInfo', JSON.stringify(miningInfo));\r\n                    var minerPic = '<img src=\"Hopstarter-Button-Button-Help.ico\" alt=\"' + req.minerData.xMiner + '\" style=\"width:20px;height:20px;\">';\r\n                    if (req.minerData.xMiner.startsWith('Blago')) {\r\n                        minerPic = '<img src=\"Untitled-1.png\" alt=\"' + req.minerData.xMiner + '\" style=\"width:20px;height:20px;\">'\r\n                    } else if (req.minerData.xMiner.startsWith('IBAndroid')) {\r\n                        minerPic = '<img src=\"http://storage.googleapis.com/ix_choosemuse/uploads/2016/02/android-logo.png\" alt=\"' + req.minerData.xMiner + ' \" style=\"width:20px;height:20px;\">'\r\n                    }\r\n                    else if (req.minerData.xMiner.startsWith('burstcoin-jminer')) {\r\n                        minerPic = '<img src=\"Jminer.png\" alt=\"' + req.minerData.xMiner + ' \" style=\"width:20px;height:20px;\">'\r\n                    }\r\n                    //   poolProtocol.clientLog(\"new best deadline : #\"+poolSession.getCurrentBlockHeight());\r\n                    poolProtocol.clientLogFormatted('<span class=\"logLine time\">' + getDateTime() + '</span>' + minerPic + '<span class=\"logLine\"> Best deadline = </span><span class=\"logLine deadline\">' + moment.duration(req.minerData.deadline * 1000).humanize(false) + '</span><span class=\"logLine\"> by Burst ID: </span><span class=\"logLine accountName\"><a href=\"https://block.burstcoin.info/acc.php?acc=' + req.minerData.accountId + '\" target=_blank>' + req.minerData.accountId + '</a></span>');\r\n\r\n                }\r\n                if (sessionState.current.bestDeadline == -1) {\r\n                    sessionState.current.bestDeadline = deadline;\r\n                    console.log('new best deadline ' + sessionState.current.bestDeadline);\r\n                    poolProtocol.getWebsocket().emit('miningInfo', JSON.stringify(miningInfo));\r\n                    var minerPic = '<img src=\"Hopstarter-Button-Button-Help.ico\" alt=\"' + req.minerData.xMiner + '\" style=\"width:20px;height:20px;\">';\r\n                    if (req.minerData.xMiner.startsWith('Blago')) {\r\n                        minerPic = '<img src=\"Untitled-1.png\" alt=\"' + req.minerData.xMiner + '\" style=\"width:20px;height:20px;\">'\r\n                    } else if (req.minerData.xMiner.startsWith('IBAndroid')) {\r\n                        minerPic = '<img src=\"http://storage.googleapis.com/ix_choosemuse/uploads/2016/02/android-logo.png\" alt=\"' + req.minerData.xMiner + ' \" style=\"width:20px;height:20px;\">'\r\n                    }\r\n                    else if (req.minerData.xMiner.startsWith('burstcoin-jminer')) {\r\n                        minerPic = '<img src=\"Jminer.png\" alt=\"' + req.minerData.xMiner + ' \" style=\"width:20px;height:20px;\">'\r\n                    }\r\n                    //poolProtocol.clientLog(\"new best deadline : #\"+poolSession.getCurrentBlockHeight());\r\n                    poolProtocol.clientLogFormatted('<span class=\"logLine time\">' + getDateTime() + '</span>' + minerPic + '<span class=\"logLine\"> Best deadline = </span><span class=\"logLine deadline\">' + moment.duration(req.minerData.deadline * 1000).humanize(false) + '</span><span class=\"logLine\"> by Burst ID: </span><span class=\"logLine accountName\"><a href=\"https://block.burstcoin.info/acc.php?acc=' + req.minerData.accountId + '\" target=_blank>' + req.minerData.accountId + '</a></span>');\r\n\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction onMiningInfoUpdate(res) {\r\n\r\n    var miningInfo = res;\r\n\r\n    if (poolSession.getCurrentBlockHeight() < miningInfo.height) {\r\n        onNewBlock(miningInfo);\r\n    }\r\n}\r\n\r\nfunction onNewClientConnected(socket) {\r\n    var clientIp = socket.request.connection.remoteAddress;\r\n    var clientPort = socket.request.connection.remotePort;\r\n\r\n    socket.on('chat', function (msg) {\r\n        onWebsocketClientChat(clientIp, msg);\r\n    });\r\n\r\n    socket.on('disconnect', function () {\r\n        //console.log('viewer disconnected from '+clientIp+\":\"+clientPort);\r\n    });\r\n\r\n    //socket.emit('log','<div class=\".json-text>\">Welcome to BurstPool, may the hash be with you!</div>');\r\n    //poolProtocol.clientLog('viewer connected from '+clientIp+\":\"+clientPort);\r\n    //console.log('viewer connected from '+clientIp+\":\"+clientPort);\r\n    var cumulativeShare = poolShare.getCumulativeShares();\r\n    socket.emit('shareList', JSON.stringify(cumulativeShare));\r\n    socket.emit('sentList', JSON.stringify(poolPayment.getPaidList()));\r\n    socket.emit('blockHistory', JSON.stringify(poolSession.getState().prevBlocks));\r\n    logMiningRound(socket);\r\n}\r\n\r\nfunction onWebsocketClientChat(clientIp, msg) {\r\n    var textMsg = msg;\r\n    if (textMsg.length > 256) {\r\n        textMsg = textMsg.substring(0, 255);\r\n    }\r\n    poolProtocol.clientLog(clientIp + ' : ' + '<span class=\"chatMsg\">' + textMsg + '</span>');\r\n}\r\n\r\nfunction saveSession() {\r\n    poolShare.saveSession();\r\n    poolPayment.saveSession();\r\n    poolSession.saveSession();\r\n    logMiningRound();\r\n}\r\n\r\nfunction initPool(walletNdx) {\r\n    poolSession.setWalletNdx(walletNdx);\r\n    poolSession.init(function () {\r\n        async.parallel(\r\n            [\r\n                function (callback) {\r\n                    poolPayment.loadSession(function () {\r\n                        callback();\r\n                    })\r\n                },\r\n                function (callback) {\r\n                    poolShare.loadSession(function () {\r\n                        callback();\r\n                    });\r\n                }\r\n            ],\r\n            function (err, results) {\r\n                poolProtocol.start(onNonceSubmitReq, onNonceSubmitedRes, onNewClientConnected);\r\n                setInterval(saveSession, 60000);\r\n                setInterval(function () {\r\n                    poolSession.getMiningInfo(function (result) {\r\n                        if (result.status === true) {\r\n                            onMiningInfoUpdate(result.msg);\r\n                        }\r\n                    });\r\n                }, 1000);\r\n            }\r\n        );\r\n    });\r\n}\r\n\r\ninitPool(config.walletIndex);\r\n\r\nprocess.stdin.resume();\r\n\r\nfunction exitHandler(options, err) {\r\n    poolShare.saveSession();\r\n    if (options.cleanup) console.log('clean');\r\n    if (err) console.log(err.stack);\r\n    if (options.exit) process.exit();\r\n}\r\n\r\nprocess.on('exit', exitHandler.bind(null, {cleanup: true}));\r\nprocess.on('SIGINT', exitHandler.bind(null, {exit: true}));\r\nprocess.on('uncaughtException', exitHandler.bind(null, {exit: true}));"
  ]
}